<?php

namespace Tests\Api;

use App\Models\User;
use Database\Factories\UserFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Routing\Middleware\ThrottleRequestsWithRedis;
use Illuminate\Support\Facades\Redis;
use Illuminate\Testing\TestResponse;
use Tests\TestCase;

abstract class AbstractApiTest extends TestCase
{
    use RefreshDatabase;

    const URI = '{{ prefix }}/';

    protected $seed = true;

    protected abstract function path(): string;

    /**
     * @return array<int, string>
     */
    abstract static function structure(): array;

    protected function beforeRefreshingDatabase()
    {
        Redis::connection()->client()->flushDB();
    }

    protected function setUp(): void
    {
        parent::setUp();

        $this->withoutMiddleware([ThrottleRequestsWithRedis::class]);
    }

    protected function makeURI(string|int $path = '', array $parameterzz = [])
    {
        $query = '';
        if (count($parameterzz)) {
            $query = '?' . http_build_query($parameterzz);
        }
        return static::URI . $this->path() . '/' . $path . $query;
    }

    /**
     * @param array<string, mixed> $attributes
     * @return User
     */
    protected function createUser(array $attributes = [])
    {
        $user = UserFactory::new()->create($attributes);
        return $user->refresh();
    }

    protected function seeData(array $structure, TestResponse $response)
    {
        $response->assertJsonStructure(
            [
                'message',
                'data' => $structure,
            ]
        );
        return $this;
    }

    protected function seeItem(array $structure, TestResponse $response)
    {
        $response->assertJsonStructure(
            [
                'message',
                'item' => $structure,
            ]
        );
        return $this;
    }

    protected function seeList(array $structure, TestResponse $response)
    {
        $response->assertJsonStructure(
            [
                'message',
                'list' => [
                    '*' => $structure,
                ],
            ]
        );
        return $this;
    }

    protected function seePage(array $structure, TestResponse $response, bool $simple = true, bool $empty = false)
    {
        $page = [
            'from',
            'path',
            'per_page',
            'to',
            'data' => [],
        ];
        if ($simple === false) {
            $page[] = 'total';
        }
        if ($empty) {
            $response->assertJsonPath('data.data', []);
        } else {
            $page['data'] = ['*' => $structure];
        }
        $response->assertJsonStructure([
            'message',
            'page' => $page,
        ]);
        return $this;
    }

}
