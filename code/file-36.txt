<?php

declare(strict_types=1);

namespace App\Base;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\JsonResponse;
use Illuminate\Pagination\AbstractPaginator;

abstract class AbstractResponse
{
    /**
     * @return array<string, mixed>
     */
    abstract public static function getData(Model $item): array;

    /**
     * @param  Model[]  $itemzz
     * @return array<int, array<string, mixed>>
     */
    public static function getDatazz(array $itemzz): array
    {
        return array_map(function ($item) {
            return static::getData($item);
        }, $itemzz);
    }

    public static function sendData(string $message, mixed $data, int $code = 200): JsonResponse
    {
        return new JsonResponse(compact('code', 'message', 'data'), $code);
    }

    public static function sendItem(Model $item, string $message = 'OK', int $code = 200): JsonResponse
    {
        $item = static::getData($item);

        return new JsonResponse(compact('code', 'message', 'item'), $code);
    }

    /**
     * @param  Model[]  $itemzz
     */
    public static function sendItemzz(array $itemzz, string $message = 'OK', int $code = 200): JsonResponse
    {
        $itemzz = static::getDatazz($itemzz);

        return new JsonResponse(compact('code', 'message', 'itemzz'), $code);
    }

    public static function sendOK(mixed $data = null): JsonResponse
    {
        return static::sendData('OK', $data, 200);
    }

    /**
     * @template T of Model
     *
     * @param  AbstractPaginator<T>  $paginator
     */
    public static function sendPage(AbstractPaginator $paginator, string $message = 'OK', int $code = 200): JsonResponse
    {
        /** @phpstan-ignore-next-line */
        $paginator->transform(function (Model $item) {
            return static::getData($item);
        });

        return new JsonResponse([
            'code' => $code,
            'message' => $message,
            'page' => $paginator,
        ]);
    }
}
