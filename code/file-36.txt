<?php

declare(strict_types=1);

namespace App\Base;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\JsonResponse;
use Illuminate\Pagination\Paginator;
use Symfony\Component\HttpFoundation\Response;

class AbstractResponse
{
    const MessageOk = 'OK';

    /**
     * @return array<string, mixed>
     */
    public static function getData(Model $Item): array
    {
        return $Item->toArray();
    }

    /**
     * @param  Model[]  $Itemzz
     * @return array<int, array<string, mixed>>
     */
    public static function getDatazz(array $Itemzz): array
    {
        return array_map(function ($Item) {
            return static::getData($Item);
        }, $Itemzz);
    }

    /**
     * @template T of Model
     *
     * @param  array<string, mixed>|null  $Item
     * @param  array<int, array<string, mixed>>  $Itemzz
     * @param  ?Paginator<T>  $Page
     * @return array<string, mixed>
     */
    public static function makeData(
        int $Code = 200,
        mixed $Data = null,
        ?array $Item = null,
        array $Itemzz = [],
        string $Message = '',
        ?Paginator $Page = null,
    ): array {
        return compact('Code', 'Data', 'Item', 'Itemzz', 'Message', 'Page');
    }

    public static function sendData(string $Message, mixed $Data, int $Code): JsonResponse
    {
        return new JsonResponse(
            self::makeData(
                $Code,
                $Data,
                null,
                [],
                $Message,
            ),
            $Code,
        );
    }

    public static function sendItem(Model $Item, string $Message = self::MessageOk, int $Code = Response::HTTP_OK): JsonResponse
    {
        $Item = static::getData($Item);

        return new JsonResponse(
            self::makeData(
                $Code,
                null,
                $Item,
                [],
                $Message,
            ),
            $Code,
        );
    }

    /**
     * @param  Model[]  $Itemzz
     */
    public static function sendItemzz(array $Itemzz, string $Message = self::MessageOk, int $Code = Response::HTTP_OK): JsonResponse
    {
        $Itemzz = static::getDatazz($Itemzz);

        return new JsonResponse(
            self::makeData(
                $Code,
                null,
                null,
                $Itemzz,
                $Message,
            ),
            $Code,
        );
    }

    public static function sendOK(mixed $Data = null): JsonResponse
    {
        return static::sendData(self::MessageOk, $Data, Response::HTTP_OK);
    }

    /**
     * @template T of Model
     *
     * @param  Paginator<T>  $Paginator
     */
    public static function sendPage(Paginator $Paginator, string $Message = self::MessageOk, int $Code = Response::HTTP_OK): JsonResponse
    {
        return new JsonResponse(
            self::makeData(
                $Code,
                null,
                null,
                [],
                $Message,
                $Paginator,
            ),
            $Code,
        );
    }
}
