<?php

declare(strict_types=1);

namespace {{ tree.getFullNameSpaceOfFile(file, entity, action) }};

use App\Models\Admin;
{% for dependency in dependencyzz %}
use {{ dependency }};{% endfor %}

class {{ helper.getClassName(file, entity, action) }}
{
    public function __construct(private {{ helper.getClassName(helper.findFile('AdminUpdateOneItem'), entity, action) }} $UpdateOne)
    {
    }

    /**
     * @param Admin $User
     * @param array<int, array> $Datazz
     * @return array<int>
     */
    function run(Admin $User, array $Datazz)
    {
        $Idzz = [];
        $Itemzz = [];
        foreach ($Datazz as $Data) {
            $Item = $this->UpdateOne->run($Data['Id'], $User,
{% for column in columnzz %}
                      $Data['{{ column.name }}'],{% endfor %});
            $Idzz[] = $Item->Id;
            $Itemzz[] = $Item;
        }

        event(new {{ action + entity.name }}Event($UserId, $Idzz));

        return $Itemzz;
    }

}
