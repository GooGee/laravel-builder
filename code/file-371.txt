<?php

declare(strict_types=1);

namespace {{ tree.getFullNameSpaceOfFile(file, entity, action) }};

{% for dependency in dependencyzz %}
use {{ dependency }};{% endfor %}
use Illuminate\Foundation\Auth\User;
use Tests\API\AbstractApiTest;

abstract class {{ helper.getClassName(file, entity, action) }} extends AbstractApiTest
{

    protected function path(): string
    {
        return "{{ entity.name }}";
    }

    /**
     * @param User $user
     * @param array<string, mixed> $attributes
     */
    public static function makeItem(User $user, array $attributes = []): {{ helper.getClassName(helper.findFile('Model'), entity, action) }}
    {
        $item = {{ helper.getClassName(helper.findFile('Factory'), entity, action) }}::new()
            ->for($user)
            ->makeOne($attributes);
        return $item;
    }

    /**
     * @return string[]
     */
    public static function structure(): array
    {
        return {{ helper.getClassName(helper.findFile('Model'), entity, action) }}::keyzz();
    }

}
