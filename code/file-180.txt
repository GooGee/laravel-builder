<?php

declare(strict_types=1);

namespace {{ tree.getFullNameSpaceOfFile(file, entity, action) }};

use App\AbstractBase\AbstractReadPage;
{% for dependency in dependencyzz %}
use {{ dependency }};{% endfor %}

class {{ helper.getClassName(file, entity, action) }} extends AbstractReadPage
{
    public function __construct(private {{ helper.getClassName(helper.findFile('Repository'), entity, action) }} $repository)
    {
    }

    /**
     * @param array<string, mixed> $data
     * @return \Illuminate\Contracts\Pagination\LengthAwarePaginator
     */
    function __invoke(array $data)
    {
        $parameter = self::makePageParameter($data, {{ helper.getClassName(helper.findFile('Repository'), entity, action) }}::PageSize);

        $qb = $this->repository->query()
            ->whereNull('dtDelete');

        $builder = self::makeReadPageQueryBuilder($qb, $parameter);

        $builder->addFilterzzSearch([
{% for column in columnzz %}
            '{{ column.name }}',{% endfor %}
        ]);
        $builder->addSort();
        return $builder->paginate();
    }

}