<?php

declare(strict_types=1);

namespace {{ tree.getFullNameSpaceOfFile(file, entity, action) }};

use App\Base\AbstractReadPage;
{% for dependency in dependencyzz %}
use {{ dependency }};{% endfor %}
use Illuminate\Pagination\LengthAwarePaginator;

class {{ helper.getClassName(file, entity, action) }} extends AbstractReadPage
{
    /**
     * @param array<string, mixed> $data
     * @return LengthAwarePaginator<{{ helper.getClassName(helper.findFile('Model'), entity, action) }}>
     */
    function run(array $data): LengthAwarePaginator
    {
        $parameter = self::makePageParameter($data, {{ helper.getClassName(helper.findFile('Model'), entity, action) }}::PageSize);

        $qb = {{ helper.getClassName(helper.findFile('Model'), entity, action) }}::query();

        $builder = self::makeReadPageQueryBuilder($qb, $parameter);

        $builder->addFilterzz([
{% for column in columnzz %}
            '{{ column.name }}',{% endfor %}
        ]);
        $builder->addSort();
        return $builder->paginate();
    }

}
