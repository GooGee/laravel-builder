<?php

declare(strict_types=1);

namespace {{ tree.getFullNameSpaceOfFile(file, entity, action) }};

class {{ helper.getClassName(file, entity, action) }} extends {{ helper.getClassName(helper.findFile('AbstractItemTest'), entity, action) }}
{
    protected function path(): string
    {
        return "{{ entity.name }}/{{ action }}";
    }

    public function test{{ action + entity.name }}()
    {
        $user = $this->createUser();
        $item = $this->makeItem($user);
        $item->save();

        $data = AbstractReadPage::makeParameter();
        $response = $this->json('GET', $this->makeURI(), $data)
            ->assertStatus(401);

        $this->actingAs($user);

        $response = $this->json('GET', $this->makeURI(), $data)
            ->assertStatus(200);
        $this->seePage($response);
        $response->assertJsonCount(1, 'page.data');

{% for column in columnzz %}
        $data['filter'] = [
            '{{ column.alias }}' => $item->{{ column.alias }},
        ];
        $response = $this->json('GET', $this->makeURI(), $data)
            ->assertStatus(200);
        $this->seePage($response);
        $response->assertJsonPath('page.data.0.{{ column.alias }}', $item->{{ column.alias }});
{% endfor %}

{% for column in columnzz %}
        $data['filter'] = [
            '{{ column.alias }}' => '{{ column.alias }} should not exist',
        ];
        $response = $this->json('GET', $this->makeURI(), $data)
            ->assertStatus(200);
        $response->assertJsonCount(0, 'page.data');
{% endfor %}

        $other = $this->createUser();
        $this->actingAs($other);

        $response = $this->json('GET', $this->makeURI(), $data)
            ->assertStatus(200);
        $response->assertJsonCount(0, 'page.data');
    }
}
