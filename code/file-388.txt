<?php

declare(strict_types=1);

namespace {{ tree.getFullNameSpaceOfFile(file, entity, action) }};

use App\Base\AbstractReadPage;

class {{ helper.getClassName(file, entity, action) }} extends {{ helper.getClassName(helper.findFile('AbstractItemTest'), entity, action) }}
{
    protected function getPath(): string
    {
        return "{{ entity.name }}/{{ action }}";
    }

    public function test{{ action + entity.name }}()
    {
        $User = $this->createUser();
        $Item = $this->makeItem($User);
        $Item->save();

        $Data = AbstractReadPage::makeParameter();
        $Response = $this->json('GET', $this->makeURI(), $Data)
            ->assertStatus(401);

        $this->actingAs($User);

        $Response = $this->json('GET', $this->makeURI(), $Data)
            ->assertStatus(422);
        $Response->assertJsonValidationErrorFor('Filter.Status');

{% for column in columnzz %}
        $Data['Filter'] = [
            '{{ column.alias }}' => $Item->{{ column.alias }},
        ];
        $Response = $this->json('GET', $this->makeURI(), $Data)
            ->assertStatus(200);
        $this->seePage($Response);
        $Response->assertJsonPath('Page.data.0.{{ column.alias }}', $Item->{{ column.alias }});
{% endfor %}

        $Response = $this->json('GET', $this->makeURI(), $Data)
            ->assertStatus(200);
        $Response->assertJsonCount(1, 'Page.data');
        $Response->assertJsonPath('Page.data.0.Id', $Item->Id);

        $Other = $this->createUser();
        $this->actingAs($Other);

        $Response = $this->json('GET', $this->makeURI(), $Data)
            ->assertStatus(200);
        $Response->assertJsonCount(0, 'Page.data');
    }
}
