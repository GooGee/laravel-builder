<?php

declare(strict_types=1);

namespace Tests\Api;

use App\Models\User;
use Database\Factories\UserFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Routing\Middleware\ThrottleRequestsWithRedis;
use Illuminate\Testing\TestResponse;
use Tests\TestCase;

abstract class AbstractApiTest extends TestCase
{
    use RefreshDatabase;

    const URI = '/v1/Api/';

    protected $seed = true;

    abstract protected function path(): string;

    /**
     * @return array<int, string>
     */
    abstract public static function structure(): array;

    protected function setUp(): void
    {
        parent::setUp();

        $this->withoutMiddleware([ThrottleRequestsWithRedis::class]);
    }

    /**
     * @param  array<string, mixed>  $attributes
     */
    protected function createUser(array $attributes = []): User
    {
        $user = UserFactory::new()->createOne($attributes);

        return $user->refresh();
    }

    /**
     * @param  array<string, mixed>  $filter
     * @return array<string, mixed>
     */
    protected function makePageParameter(array $filter = [],
                                         string $sortField = 'id',
                                         string $sortOrder = 'desc',
                                         int $page = 1,
                                         int $perPage = 10,
    ): array {
        return compact('filter', 'sortField', 'sortOrder', 'page', 'perPage');
    }

    /**
     * @param  array<string, mixed>  $parameter
     */
    protected function makeURI(string|int $path = '', array $parameter = []): string
    {
        $query = '';
        if (count($parameter)) {
            $query = '?'.http_build_query($parameter);
        }

        return static::URI.$this->path().'/'.$path.$query;
    }

    protected function seeData(TestResponse $response): self
    {
        $response->assertJsonStructure(
            [
                'message',
                'data' => static::structure(),
            ]
        );

        return $this;
    }

    protected function seeItem(TestResponse $response): self
    {
        $response->assertJsonStructure(
            [
                'message',
                'item' => static::structure(),
            ]
        );

        return $this;
    }

    protected function seeItemzz(TestResponse $response): self
    {
        $response->assertJsonStructure(
            [
                'message',
                'itemzz' => [
                    '*' => static::structure(),
                ],
            ]
        );

        return $this;
    }

    protected function seePage(TestResponse $response, bool $simple = true, bool $empty = false): self
    {
        $page = [
            'from',
            'path',
            'per_page',
            'to',
            'data' => [],
        ];
        if ($simple === false) {
            $page[] = 'total';
        }
        if ($empty) {
            $response->assertJsonPath('data.data', []);
        } else {
            $page['data'] = ['*' => static::structure()];
        }
        $response->assertJsonStructure([
            'message',
            'page' => $page,
        ]);

        return $this;
    }
}
