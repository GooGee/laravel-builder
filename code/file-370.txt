<?php

declare(strict_types=1);

namespace Tests\Api;

use App\Models\User;
use Database\Factories\UserFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Routing\Middleware\ThrottleRequestsWithRedis;
use Illuminate\Testing\TestResponse;
use Tests\TestCase;

abstract class AbstractApiTestBase extends TestCase
{
    use RefreshDatabase;

    const URI = '/V1/Api/';

    protected $seed = true;

    abstract protected function getPath(): string;

    /**
     * @return array<int, string>
     */
    abstract public static function getStructure(): array;

    protected function setUp(): void
    {
        parent::setUp();

        $this->withoutMiddleware([ThrottleRequestsWithRedis::class]);
    }

    /**
     * @param array<string, mixed> $Map
     */
    protected function createUser(array $Map = []): User
    {
        $User = UserFactory::new()->createOne($Map);

        return $User->refresh();
    }

    /**
     * @param array<string, mixed> $Parameter
     */
    protected function makeURI(string|int $Path = '', array $Parameter = []): string
    {
        $query = '';
        if (count($Parameter)) {
            $query = '?' . http_build_query($Parameter);
        }

        return static::URI . $this->getPath() . '/' . $Path . $query;
    }

    protected function seeData(TestResponse $Response): self
    {
        $Response->assertJsonStructure(
            [
                'Message',
                'Data',
            ]
        );

        return $this;
    }

    protected function seeItem(TestResponse $Response): self
    {
        $Response->assertJsonStructure(
            [
                'Message',
                'Item' => static::getStructure(),
            ]
        );

        return $this;
    }

    protected function seeItemzz(TestResponse $Response): self
    {
        $Response->assertJsonStructure(
            [
                'Message',
                'Itemzz' => [
                    '*' => static::getStructure(),
                ],
            ]
        );

        return $this;
    }

    protected function seePage(TestResponse $Response, bool $Simple = true, bool $Empty = false): self
    {
        $Page = [
            'from',
            'path',
            'per_page',
            'to',
            'data' => [],
        ];
        if ($Simple === false) {
            $Page[] = 'total';
        }
        if ($Empty) {
            $Response->assertJsonPath('data.data', []);
        } else {
            $Page['data'] = ['*' => static::getStructure()];
        }
        $Response->assertJsonStructure([
            'Message',
            'Page' => $Page,
        ]);

        return $this;
    }
}
