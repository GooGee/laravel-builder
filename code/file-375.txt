<?php

// ReadAll

declare(strict_types=1);

namespace {{ tree.getFullNameSpaceOfFile(file, entity, action) }};

class {{ helper.getClassName(file, entity, action) }} extends {{ helper.getClassName(helper.findFile('AbstractItemTestBase'), entity, action) }}
{
    protected static function getPath(): string
    {
        return "{{ entity.name }}/{{ action }}";
    }

    public function test{{ action + entity.name }}()
    {
        $User = $this->createUser();
        $Item = $this->makeItem($User);
        $Item->save();
        $Data = $Item->toArray();
        $Response = $this->getJsonWithData($this->makeUri(), $Data)
            ->assertStatus(401);

        $this->actingAs($User);

{% for column in columnzz %}
        $Data = $Item->toArray();
        unset($Data['{{ column.alias }}']);
        $Response = $this->getJsonWithData($this->makeUri(), $Data)
            ->assertStatus(422);
        $Response->assertJsonValidationErrorFor('{{ column.alias }}');
{% endfor %}
        $Data = $Item->toArray();
        $Response = $this->getJsonWithData($this->makeUri(), $Data)
            ->assertStatus(200);
        $this->seeItemzz($Response);
        $Response->assertJsonCount(1, 'Itemzz');
        $Response->assertJsonIsObject('Itemzz.0.User');
{% for column in columnzz %}
        $Response->assertJsonPath('Itemzz.0.{{ column.alias }}', $Item->{{ column.alias }});{% endfor %}
    }
}
