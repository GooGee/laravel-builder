<?php

declare(strict_types=1);

namespace {{ tree.getFullNameSpaceOfFile(file, entity, action) }};

class {{ helper.getClassName(file, entity, action) }} extends {{ helper.getClassName(helper.findFile('AdminAbstractItemTest'), entity, action) }}
{
    protected function getPath(): string
    {
        return "{{ entity.name }}/{{ action }}";
    }

    public function test{{ action + entity.name }}()
    {
        $Permission = $this->createPermission('{{ action + entity.name }}');
        $admin = $this->createAdmin();
        $Item = $this->makeItem($admin);
        $Item->save();

        $User = $this->createUser();
        $this->actingAs($User);

        $Data = $Item->toArray();
        $Response = $this->patchJson($this->makeURI($Item->Id), $Data)
            ->assertStatus(401);

        $this->actingAs($admin, 'admin');

{% for column in columnzz %}
        $Data = $Item->toArray();
        unset($Data['{{ column.alias }}']);
        $Response = $this->patchJson($this->makeURI($Item->Id), $Data)
            ->assertStatus(422);
        $Response->assertJsonValidationErrorFor('{{ column.alias }}');
{% endfor %}

        $Item->dtUpdate = now();
        $Data = $Item->toArray();
        $Response = $this->patchJson($this->makeURI($Item->Id), $Data)
            ->assertStatus(403);
        $Response->assertSeeText($Permission->name);

        $admin->givePermissionTo($Permission);
        $Item->dtUpdate = now();
        $Data = $Item->toArray();
        $Response = $this->patchJson($this->makeURI($Item->Id), $Data)
            ->assertStatus(200);
        $this->seeItem($Response);
{% for column in columnzz %}
        $Response->assertJsonPath('Item.{{ column.alias }}', $Item->{{ column.alias }});{% endfor %}

        $Item->delete();
        $Response = $this->patchJson($this->makeURI($Item->Id), $Data)
            ->assertStatus(404);
    }
}
