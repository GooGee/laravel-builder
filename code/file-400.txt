<?php

declare(strict_types=1);

namespace {{ tree.getFullNameSpaceOfFile(file, entity, action) }};

use App\Models\User;
{% for dependency in dependencyzz %}
use {{ dependency }};{% endfor %}

class {{ helper.getClassName(file, entity, action) }}
{
    public function __construct(private {{ helper.getClassName(helper.findFile('CreateOneItem'), entity, action) }} $createOne)
    {
    }

    /**
     * @param User $user
     * @param  array<int, array<string, mixed>>  $datazz
     * @return array<int, {{ helper.getClassName(helper.findFile('Model'), entity, action) }}>
     */
    function run(int $userId, array $datazz): array
    {
        /** @var array<int, int> $idzz */
        $idzz = [];
        /** @var array<int, {{ helper.getClassName(helper.findFile('Model'), entity, action) }}> $itemzz */
        $itemzz = [];
        foreach ($datazz as $data) {
            $item = $this->createOne->make($userId,
{% for column in columnzz %}
                      $data['{{ column.name }}'],{% endfor %});
            $this->createOne->create($userId, $item);
            $idzz[] = $item->id;
            $itemzz[] = $item;
        }

        event(new {{ action + entity.name }}Event($userId, $idzz));

        return $itemzz;
    }

}
