<?php

declare(strict_types=1);

namespace {{ tree.getFullNameSpaceOfFile(file, entity, action) }};

class {{ helper.getClassName(file, entity, action) }} extends {{ helper.getClassName(helper.findFile('AbstractItemTest'), entity, action) }}
{
    public function test{{ action + entity.name }}()
    {
        $user = $this->createUser();
        $item = $this->makeItem($user);
        $item->save();
        $data = $item->toArray();
        $response = $this->putJson($this->makeURI($item->id), $data)
            ->assertStatus(401);

        $other = $this->createUser();
        $this->actingAs($other);
        $response = $this->putJson($this->makeURI($item->id), $data)
            ->assertStatus(403);

        $this->actingAs($user);

{% for column in columnzz %}
        $data = $item->toArray();
        unset($data['{{ column.alias }}']);
        $response = $this->putJson($this->makeURI($item->id), $data)
            ->assertStatus(422);
        $response->assertJsonValidationErrorFor('{{ column.alias }}');
{% endfor %}
        $item->dtUpdate = now();
        $data = $item->toArray();
        $response = $this->putJson($this->makeURI($item->id), $data)
            ->assertStatus(200);
        $this->seeItem($response);
{% for column in columnzz %}
        $response->assertJsonPath('item.{{ column.alias }}', $item->{{ column.alias }});{% endfor %}

        $item->delete();
        $item->save();
        $response = $this->putJson($this->makeURI($item->id), $data)
            ->assertStatus(404);
    }
}
