<?php

declare(strict_types=1);

namespace App\Exceptions;

use App\Base\AbstractResponse;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Http\Request;
use Illuminate\Validation\ValidationException;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'CurrentPassword',
        'password',
        'Password',
        'password_confirmation',
        'PasswordConfirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    /**
     * @param  Request  $request
     */
    public function render($request, Throwable $e): Response
    {
        if (str_starts_with($request->path(), 'V1/Api') === false) {
            return parent::render($request, $e);
        }

        $code = Response::HTTP_BAD_REQUEST;
        $error = null;
        if ($e instanceof ValidationException) {
            $code = $e->status;
            $error = $e->errors();
        }
        if ($e instanceof AuthenticationException) {
            $code = Response::HTTP_UNAUTHORIZED;
        }
        if ($e instanceof HttpException) {
            $code = $e->getStatusCode();
        }
        if ($e instanceof ModelNotFoundException) {
            $code = Response::HTTP_NOT_FOUND;
        }

        return AbstractResponse::sendError($error, $e->getMessage(), $code);
    }
}
