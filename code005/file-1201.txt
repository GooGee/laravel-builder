<?php

// CreateOneItem

declare(strict_types=1);

namespace {{ tree.getFullNameSpaceOfFile(file, entity, action) }};

{% for dependency in dependencyzz %}
use {{ dependency }};{% endfor %}

class {{ helper.getClassName(file, entity, action) }}
{
    static function make(
        int $UserId,
{% for column in columnzz %}
        {{ helper.makeColumnType(column) }} ${{ column.name }},{% endfor %}
    ): {{ helper.getClassName(helper.findFile('Model'), entity, action) }}
    {
        $item = new {{ helper.getClassName(helper.findFile('Model'), entity, action) }}();
        $item->UserId = $UserId;

{% for column in columnzz %}
        $item->{{ column.name }} = ${{ column.name }};{% endfor %}

        return $item;
    }

    static function run({{ helper.getClassName(helper.findFile('Model'), entity, action) }} $item, bool $ThrowIfExist = true): {{ helper.getClassName(helper.findFile('Model'), entity, action) }}
    {
        if ($ThrowIfExist) {
            $exist = {{ helper.getClassName(helper.findFile('Model'), entity, action) }}::query()
                ->where('UserId', $item->UserId)
                ->exists();
            if ($exist) {
                throw new DuplicatedException();
            }
        }

        $item->save();
        $item->refresh();

        event(new {{ action + entity.name }}Event($item));

        return $item;
    }

}
