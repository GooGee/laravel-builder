<?php

// CreateOneItem

declare(strict_types=1);

namespace {{ tree.getFullNameSpaceOfFile(file, entity, action) }};

{% for dependency in dependencyzz %}
use {{ dependency }};{% endfor %}

class {{ helper.getClassName(file, entity, action) }}
{
    public static function copy(int $UserId, {{ helper.getClassName(helper.findFile('Model'), entity, action) }} $Source): {{ helper.getClassName(helper.findFile('Model'), entity, action) }}
    {
        return self::make(
            $UserId,
{% for column in columnzz %}
            {{ column.name }}: $Source->{{ column.name }},{% endfor %}
        );
    }

    static function make(
        int $UserId,
{% for column in columnzz %}
        {{ helper.makeColumnType(column) }} ${{ column.name }},{% endfor %}
    ): {{ helper.getClassName(helper.findFile('Model'), entity, action) }} {
        $Item = new {{ helper.getClassName(helper.findFile('Model'), entity, action) }}();
        $Item->UserId = $UserId;

{% for column in columnzz %}
        $Item->{{ column.name }} = ${{ column.name }};{% endfor %}

        return $Item;
    }

    static function run({{ helper.getClassName(helper.findFile('Model'), entity, action) }} $Item, bool $ThrowIfExist): {{ helper.getClassName(helper.findFile('Model'), entity, action) }}
    {
        if ($ThrowIfExist) {
            $exist = {{ helper.getClassName(helper.findFile('Model'), entity, action) }}::query()
                ->where('UserId', $Item->UserId)
                ->exists();
            if ($exist) {
                throw new DuplicatedException({{ helper.getClassName(helper.findFile('Model'), entity, action) }}::getShortName());
            }
        }

        $Item->save();
        $Item->refresh();

        event(new {{ action + entity.name }}Event($Item));

        return $Item;
    }

}
