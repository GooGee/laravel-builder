<?php

// ReadPageTest

declare(strict_types=1);

namespace {{ tree.getFullNameSpaceOfFile(file, entity, action) }};

use App\Base\ReadPageParameter;

class {{ helper.getClassName(file, entity, action) }} extends {{ helper.getClassName(helper.findFile('AbstractItemTestBase'), entity, action) }}
{
    protected static function getPath(): string
    {
        return "{{ entity.name }}-{{ action }}";
    }

    public function test{{ action + entity.name }}()
    {
        $User = $this->createUser();
        $Item = $this->makeItem($User);
        $Item->save();

        $data = (new ReadPageParameter())->toArray();
        $response = $this->getJsonWithData($this->makeUri(), $data)
            ->assertStatus(401);

        $this->actingAs($User);

        $response = $this->getJsonWithData($this->makeUri(), $data)
            ->assertStatus(422);
        $response->assertJsonValidationErrorFor('Filter.Status', self::ErrorFieldName);

{% for column in columnzz %}
        $data['Filter'] = [
            '{{ column.alias }}' => $Item->{{ column.alias }},
        ];
        $response = $this->getJsonWithData($this->makeUri(), $data)
            ->assertStatus(200);
        $this->seePage($response);
        $response->assertJsonCount(1, 'Page.data');
        $response->assertJsonPath('Page.data.0.{{ column.alias }}', $Item->{{ column.alias }});
{% endfor %}

        $response = $this->getJsonWithData($this->makeUri(), $data)
            ->assertStatus(200);
        $response->assertJsonCount(1, 'Page.data');
        $response->assertJsonIsObject('Page.data.0.User');
        $response->assertJsonPath('Page.data.0.Id', $Item->Id);

        $OtherUser = $this->createUser();
        $this->actingAs($OtherUser);

        $response = $this->getJsonWithData($this->makeUri(), $data)
            ->assertStatus(200);
        $response->assertJsonCount(0, 'Page.data');
    }
}
