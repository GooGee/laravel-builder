<?php

declare(strict_types=1);

namespace App\Base;

use App\Models\AbstractModel;

class PageParameter
{
    const PageSize = 10;

    const SortAsc = 'Asc';

    const SortDesc = 'Desc';

    /**
     * @param  array<string, mixed>  $Filter
     * @param  array<string, mixed>  $WhereNot
     * @param  array<string, mixed>  $WhereIn
     * @param  array<string, mixed>  $WhereNotIn
     */
    public function __construct(
        public array $Filter = [],
        public int $Page = 1,
        public int $PerPage = self::PageSize,
        public string $SortField = AbstractModel::PrimaryKey,
        public string $SortOrder = self::SortDesc,
        public array $WhereNot = [],
        public array $WhereIn = [],
        public array $WhereNotIn = [],
    ) {
        if ($this->Page < 1) {
            $this->Page = 1;
        }
        if ($this->PerPage < 1) {
            $this->PerPage = 1;
        }
    }

    public function getFilterValue(string $Key): bool|int|string|null
    {
        return $this->Filter[$Key] ?? null;
    }

    public function getWhereNotValue(string $Key): bool|int|string|null
    {
        return $this->WhereNot[$Key] ?? null;
    }

    /**
     * @return array<int, bool|int|string>
     */
    public function getWhereInValuezz(string $Key): array
    {
        return $this->WhereIn[$Key] ?? [];
    }

    /**
     * @return array<int, bool|int|string>
     */
    public function getWhereNotInValuezz(string $Key): array
    {
        return $this->WhereNotIn[$Key] ?? [];
    }

    /**
     * @param  array<string, mixed>  $Map
     */
    public static function from(array $Map): self
    {
        return new PageParameter(
            $Map['Filter'] ?? [],
            isset($Map['Page']) ? intval($Map['Page']) : 1,
            isset($Map['PerPage']) ? intval($Map['PerPage']) : self::PageSize,
            $Map['SortField'] ?? AbstractModel::PrimaryKey,
            $Map['SortOrder'] ?? self::SortDesc,
            $Map['WhereNot'] ?? [],
            $Map['WhereIn'] ?? [],
            $Map['WhereNotIn'] ?? [],
        );
    }

    /**
     * @return array<string, mixed>
     */
    public function toArray(): array
    {
        return [
            'Filter' => $this->Filter,
            'WhereNot' => $this->WhereNot,
            'WhereIn' => $this->WhereIn,
            'WhereNotIn' => $this->WhereNotIn,
            'Page' => $this->Page,
            'PerPage' => $this->PerPage,
            'SortField' => $this->SortField,
            'SortOrder' => $this->SortOrder,
        ];
    }
}
